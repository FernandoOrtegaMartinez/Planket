apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'

def appId = "com.fomdeveloper.planket"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId appId
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "0.1"
        resConfig "en"

        multiDexEnabled true

        testInstrumentationRunner "com.fomdeveloper.planket.runner.MockTestRunner"

        buildConfigField "String", "FLICKR_API_KEY","\"${flickrApiKey}\""
        buildConfigField "String", "FLICKR_CONSUMER_SECRET","\"${flickrConsumerSecret}\""

    }

    lintOptions {
        checkReleaseBuilds false
    }


    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

ext {
    supportLibraryVersion = '25.1.0'
    retrofitVersion = '2.0.2'
    daggerVersion = '2.7'
    butterknifeVersion = '8.0.0'
    espressoVersion = '2.2.2'
    runnerVersion = '0.5'
    dexmakerVersion = '1.4'
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Support Libraries
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"

    // REST Interactions
    compile ("com.squareup.retrofit2:retrofit:$retrofitVersion")
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'

    // Oauth
    compile 'se.akerfeldt:okhttp-signpost:1.1.0'
    compile 'oauth.signpost:signpost-core:1.2.1.2'

    // JSON Parsing
    compile 'com.google.code.gson:gson:2.6.1'
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // View Injection
    compile "com.jakewharton:butterknife:$butterknifeVersion"
    apt "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    // RxJava
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'io.reactivex:rxjava:1.1.5'

    // Dependency injection
    compile "com.google.dagger:dagger:$daggerVersion"
    provided 'javax.annotation:jsr250-api:1.0'
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestApt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Parcelables
    compile 'org.parceler:parceler-api:1.1.5'
    apt 'org.parceler:parceler:1.1.5'

    // Image Loading
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Logging
    compile 'com.jakewharton.timber:timber:3.1.0'

    // Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }

    // Testing
    testCompile "junit:junit:4.12"
    compile "org.mockito:mockito-core:1.10.19"
    testCompile "org.mockito:mockito-core:1.10.19"
    androidTestCompile "org.mockito:mockito-core:1.10.19"
    compile "org.hamcrest:hamcrest-core:1.3"

    androidTestCompile "com.android.support:support-annotations:$supportLibraryVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestCompile "com.android.support.test:runner:$runnerVersion"
    androidTestCompile "com.android.support.test:rules:$runnerVersion"

    androidTestCompile "com.crittercism.dexmaker:dexmaker:$dexmakerVersion"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:$dexmakerVersion"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:$dexmakerVersion"

}

afterEvaluate {
    initFabricPropertiesIfNeeded()
    initFlickrKeysIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: System.getenv("FABRIC_API_SECRET"))
            entry(key: "apiKey", value: System.getenv("FABRIC_API_KEY"))
        }
    }
}

def initFlickrKeysIfNeeded() {
    def propertiesFile = rootProject.file('gradle.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated gradle.properties from system environment to prevent keys to be committed to source control."
        ant.propertyfile(file: "$rootProject.projectDir/gradle.properties", comment: commentMessage) {
            entry(key: "flickrApiKey", value: System.getenv("FLICKR_API_KEY"))
            entry(key: "flickrConsumerSecret", value: System.getenv("FLICKR_CONSUMER_SECRET"))
        }
    }
}